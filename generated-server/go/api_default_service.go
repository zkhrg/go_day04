// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Candy Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package openapi

/*
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

unsigned int i;
unsigned int argscharcount = 0;

char *ask_cow(char phrase[]) {
  int phrase_len = strlen(phrase);
  char *buf = (char *)malloc(sizeof(char) * (160 + (phrase_len + 2) * 3));
  strcpy(buf, " ");

  for (i = 0; i < phrase_len + 2; ++i) {
    strcat(buf, "_");
  }

  strcat(buf, "\n< ");
  strcat(buf, phrase);
  strcat(buf, " ");
  strcat(buf, ">\n ");

  for (i = 0; i < phrase_len + 2; ++i) {
    strcat(buf, "-");
  }
  strcat(buf, "\n");
  strcat(buf, "        \\   ^__^\n");
  strcat(buf, "         \\  (oo)\\_______\n");
  strcat(buf, "            (__)\\       )\\/\\\n");
  strcat(buf, "                ||----w |\n");
  strcat(buf, "                ||     ||\n");
  return buf;
}
*/
import "C"

import (
	"context"
	"fmt"
	"net/http"
	"unsafe"
	"github.com/zkhrg/go_day04/internal/candy"
)

// DefaultAPIService is a service that implements the logic for the DefaultAPIServicer
// This service should implement the business logic for every endpoint for the DefaultAPI API.
// Include any external packages or services that will be required by this service.
type DefaultAPIService struct {
}

// NewDefaultAPIService creates a default api service
func NewDefaultAPIService() *DefaultAPIService {
	return &DefaultAPIService{}
}

// BuyCandy -
func (s *DefaultAPIService) BuyCandy(ctx context.Context, order BuyCandyRequest) (ImplResponse, error) {
	change := int(order.Money) - candy.CalculateOrderPrice(order.CandyType, int(order.CandyCount))

	if change < 0 {
		return Response(http.StatusPaymentRequired, BuyCandy400Response{
			Error: fmt.Sprintf("not enough money, you need %d more", change),
		}), nil
	}
	
	return Response(http.StatusCreated, BuyCandy201Response{
		Thanks: CallCowSay("Thank you!"),
		Change: int32(change),
	}), nil
}

func CallCowSay(s string) string {
	cString := C.CString(s)
	defer C.free(unsafe.Pointer(cString))

	cResult := C.ask_cow(cString)
	defer C.free(unsafe.Pointer(cResult))

	goResult := C.GoStringN(cResult, C.int(C.strlen(cResult)))
	return goResult
}
